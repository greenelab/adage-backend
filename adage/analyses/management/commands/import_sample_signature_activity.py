"""
Import sample-signature activity data (generated by Jie) into the database.
This management command can be invoked like this:

  python manage.py import_sample_signature_activity \
--filename=<filename> --ml_model=<ml_model>

The two required arguments of this commands are:
  (1) filename: a tab-delimited sample-signature activity file's name;
  (2) ml_model: title of machine learning model for activity data

IMPORTANT:
Before running this command, please make sure that the machine learning model
whose title is `ml_model` already exists in the database.  If it doesn't, use
the management command "create_or_update_ml_model.py" to add it to database.
"""

import logging
from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from .models import Sample, MLModel, Signature, Activity


class Command(BaseCommand):
    help = ("Import activity data from input spreadsheet.")

    def add_arguments(self, parser):
        parser.add_argument(
            '--filename', dest='filename', type=open, required=True
        )
        parser.add_argument(
            '--ml_model', dest='ml_model', type=str, required=True
        )

    def handle(self, **options):
        try:
            import_activity(options['filename'], options['ml_model'])
            self.stdout.write(
                self.style.SUCCESS("Sample-signature activity imported successfully")
            )
        except Exception as e:
            raise CommandError("Failed to import activity data: %s" % e)


def import_activity(file_handle, ml_model_title):
    """
    Read the data in activity sheet into the database.
    This function first checks whether ml_model_title exists in the
    database, then call import_signatures() and import_activity_line()
    to populate "Signature" and "Activity" tables in the database.
    """

    # Raise an exception if ml_model_title doesn't exist in the database.
    try:
        mlmodel = MLModel.objects.get(title=ml_model_title)
    except MLModel.DoesNotExist:
        raise Exception(
            "Input ml_model (%s) not exist in database" % ml_model_title
        )

    # Enclose reading/importing process in a transaction context manager.
    # Any exception raised inside the manager will terminate the transaction
    # and roll back the database.
    with transaction.atomic():
        signatures = []
        for line_num, line in enumerate(file_handle, start=1):
            tokens = line.rstrip('\r\n').split('\t')
            if line_num == 1:
                signatures = tokens[1:]
                import_signatures(signatures, mlmodel)
            else:
                import_activity_line(line_num, signatures, tokens, mlmodel)


def import_signatures(signatures, mlmodel):
    """
    Import input signatures into "Signature" table in the database.

    This function will raise an exception if any of the following errors
    are detected:
      * Signature name is blank (null or consists of space characters only);
      * Signature name is duplicate;
      * Signature/ml_model_title pair is not unique.
    """

    signature_set = set()
    for col_num, name in enumerate(signatures, start=2):
        if not name or name.isspace():
            raise Exception(
                "Input file line #1 column #%d: blank signature name" % col_num
            )
        elif name in signature_set:
            raise Exception(
                "Input file line #1 column #%d: %s is NOT unique" % (col_num, name)
            )
        elif Signature.objects.filter(name=name, mlmodel=mlmodel).exists():
            raise Exception(
                "Input file line #1 column #%d: Signature name (%s) already "
                "exists in database" % (col_num, name)
            )
        else:
            signature_set.add(name)
            Signature.objects.create(name=name, mlmodel=mlmodel)


def import_activity_line(line_num, signatures, tokens, mlmodel):
    """
    Import numerical values in input tokens into "Activity" table.

    This function will raise an exception if any of the following errors
    are detected on the data line:
      * # of columns on this line is not equal to # of signatures plus 1.
      * The data source field (in column #1) is blank;
      * Any field from column #2 to the end can not be converted into a float type.
    """

    if len(tokens) != len(signatures) + 1:
        raise Exception(
            "Input file line #%d: Number of columns is not %d"
            % (line_num, len(signatures) + 1)
        )

    data_source = tokens[0]
    if not data_source or data_source.isspace():
        raise Exception(
            "Input file line #%d: column #1 (data_source) is blank" % line_num
        )

    try:
        sample = Sample.objects.get(ml_data_source=data_source)
    except Sample.DoesNotExist:
        # If data_source on the line is not found in Sample table, then
        # instead of raising an exception, generate a warning message
        # and skip this activity data line.
        logging.warn(
            "Input file line #%d: data_source in column #1 not found in "
            "database: %s", line_num, data_source
        )
        return

    values = tokens[1:]
    # In order to speed up the import, all activity records on the same
    # line will be saved in "records" and created in bulk at the end.
    records = []
    col_num = 2   # The numerical values start from column #2.
    for signature_name, value in zip(signatures, values):
        try:
            float_val = float(value)
        except ValueError:
            raise Exception(
                "Input file line #%d column #%d: %s can not be converted into "
                "float type" % (line_num, col_num, value)
            )

        signature = Signature.objects.get(name=signature_name, mlmodel=mlmodel)
        records.append(
            Activity(sample=sample, signature=signature, value=float_val)
        )
        col_num += 1

    Activity.objects.bulk_create(records)  # create records in bulk
